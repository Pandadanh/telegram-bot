import { Injectable, Logger } from '@nestjs/common';
import { Interval } from '@nestjs/schedule';
import axios from 'axios';

@Injectable()
export class TelegramService {
    private readonly logger = new Logger(TelegramService.name);
    private readonly botToken = '7722494289:AAGa3672BL-INBLI2rVPTWfddLLxkMN9bjA';
    private readonly apiUrl = `https://api.telegram.org/bot${this.botToken}`;
    private lastUpdateId = 0; // L∆∞u ID c·∫≠p nh·∫≠t cu·ªëi c√πng

    // H√†m g·ªçi API Telegram m·ªói 1 gi√¢y
    @Interval(1000)
    async fetchMessages() {
        try {
            const response = await axios.get(`${this.apiUrl}/getUpdates`, {
                params: { offset: this.lastUpdateId + 1 }, // L·∫•y tin nh·∫Øn m·ªõi
            });

            const updates = response.data.result;
            if (updates.length > 0) {
                for (const update of updates) {
                    this.handleMessage(update);
                    this.lastUpdateId = update.update_id; // C·∫≠p nh·∫≠t ID m·ªõi nh·∫•t
                }
            }
        } catch (error) {
            this.logger.error('L·ªói khi l·∫•y tin nh·∫Øn:', error.message);
        }
    }

    // H√†m x·ª≠ l√Ω tin nh·∫Øn
    async handleMessage(update: any) {
        const message = update.message;
        if (!message) return;

        const chatId = message.chat.id;
        const text = message.text;

        this.logger.log(`üì© Tin nh·∫Øn t·ª´ ${chatId}: ${text}`);

        // Tr·∫£ l·ªùi tin nh·∫Øn
        await this.sendMessage(chatId, `B·∫°n v·ª´a g·ª≠i: ${text}`);
    }

    // H√†m g·ª≠i tin nh·∫Øn
    async sendMessage(chatId: number, text: string) {
        await axios.post(`${this.apiUrl}/sendMessage`, { chat_id: chatId, text });
    }
}
