import { Injectable, Logger } from '@nestjs/common';
import { google } from 'googleapis';
import { PrismaService } from '../prisma/prisma.service';
import * as fs from 'fs';
import * as path from 'path';
import { spawn } from 'child_process';
import { Email } from './email.entity';
import { Interval } from '@nestjs/schedule';

@Injectable()
export class EmailService {
    private readonly logger = new Logger(EmailService.name);
    private readonly SCOPES = ['https://www.googleapis.com/auth/gmail.readonly'];
    private credentialsPath = path.join(__dirname, '../../credentials.json');

    constructor(private readonly prisma: PrismaService) { }

    async getOAuthClient() {
        try {
            // üîπ ƒê·ªçc file credentials.json
            const credentials = JSON.parse(fs.readFileSync(this.credentialsPath, 'utf-8'));
            const { client_secret, client_id, redirect_uris } = credentials.installed;
            const oAuth2Client = new google.auth.OAuth2(client_id, client_secret, redirect_uris[0]);

            // üîπ Ki·ªÉm tra token trong database
            let tokenData = await this.prisma.oAuthToken.findFirst({
                orderBy: { createdAt: 'desc' }, // L·∫•y token m·ªõi nh·∫•t
            });

            if (tokenData) {
                oAuth2Client.setCredentials({
                    access_token: tokenData.accessToken,
                    refresh_token: tokenData.refreshToken,
                    expiry_date: tokenData.expiryDate.getTime(),
                });

                // üîπ L√†m m·ªõi token n·∫øu h·∫øt h·∫°n
                if (new Date().getTime() >= tokenData.expiryDate.getTime()) {
                    this.logger.log('Token h·∫øt h·∫°n, ti·∫øn h√†nh l√†m m·ªõi...');
                    const refreshedToken = await oAuth2Client.refreshAccessToken();
                    const newToken = refreshedToken.credentials;

                    await this.prisma.oAuthToken.create({
                        data: {
                            accessToken: newToken.access_token,
                            refreshToken: newToken.refresh_token || tokenData.refreshToken, // Gi·ªØ refresh token n·∫øu kh√¥ng c√≥ m·ªõi
                            expiryDate: new Date(newToken.expiry_date),
                        },
                    });

                    oAuth2Client.setCredentials(newToken);
                }
            } else {
                this.logger.warn('Kh√¥ng t√¨m th·∫•y token OAuth, c·∫ßn ƒëƒÉng nh·∫≠p l·∫°i.');
                return await this.getNewToken(oAuth2Client);
            }

            return oAuth2Client;
        } catch (error) {
            this.logger.error('L·ªói khi l·∫•y OAuth client:', error);
            throw error;
        }
    }

    private async getNewToken(oAuth2Client: any) {
        try {
            this.logger.log('M·ªü tr√¨nh duy·ªát ƒë·ªÉ x√°c th·ª±c...');
            const authUrl = oAuth2Client.generateAuthUrl({
                access_type: 'offline',
                scope: this.SCOPES,
            });

            console.log(`Vui l√≤ng truy c·∫≠p link n√†y ƒë·ªÉ x√°c th·ª±c: ${authUrl}`);

            // üö® D·ª´ng l·∫°i t·∫°i ƒë√¢y v√¨ c·∫ßn user nh·∫≠p code t·ª´ tr√¨nh duy·ªát v√†o server
            throw new Error('C·∫ßn user nh·∫≠p code x√°c th·ª±c');
        } catch (error) {
            this.logger.error('L·ªói khi l·∫•y token m·ªõi:', error);
            throw error;
        }
    }

    @Interval(1800000) // 30 ph√∫t
    async runPythonScript(): Promise<string> {
        return new Promise((resolve, reject) => {

            const currentHour = new Date().getHours(); // L·∫•y gi·ªù hi·ªán t·∫°i

            if (currentHour >= 23 || currentHour < 6) {
                console.log("Ngo√†i gi·ªù ho·∫°t ƒë·ªông (23h - 6h), kh√¥ng ch·∫°y.");
                return;
            }

            const scriptPath = path.resolve(
                'C:/Users/Admin/Desktop/word/persional/OneForAll/chi-project/PersonalFinancialManagement/telegram-bot/test.py',
            );

            const pythonProcess = spawn('python', ['-X', 'utf8', scriptPath]);

            let output = '';
            pythonProcess.stdout.on('data', (data) => {
                output += data.toString();
            });

            pythonProcess.stderr.on('data', (data) => {
                console.error(`L·ªói t·ª´ Python: ${data}`);
                reject(data.toString());
            });

            pythonProcess.on('close', (code) => {
                if (code === 0) {
                    resolve(output);
                } else {
                    reject(`L·ªói khi ch·∫°y script v·ªõi m√£ l·ªói: ${code}`);
                }
            });
        });
    }


    async getUnreadEmails() {
        console.log('üìß ƒêang l·∫•y email ch∆∞a ƒë·ªçc...');
        return this.prisma.email.findFirst({
            where: { isRead: false },
            orderBy: { createdAt: 'asc' },
        });
    }


    // H√†m chu·∫©n h√≥a category: Vi·∫øt hoa, b·ªè d·∫•u, thay d·∫•u c√°ch b·∫±ng "_"
    private normalizeCategory(text: string): string {
        const removeDiacritics = (str: string) =>
            str.normalize('NFD').replace(/[\u0300-\u036f]/g, ''); // Lo·∫°i b·ªè d·∫•u ti·∫øng Vi·ªát

        return removeDiacritics(text)
            .toUpperCase() // Chuy·ªÉn th√†nh ch·ªØ hoa
            .replace(/\s+/g, '_'); // Thay d·∫•u c√°ch b·∫±ng "_"
    }

    async saveEmailsReply(email: any, userMessage: string): Promise<boolean> {
        try {
            const [categoryRaw, noteExpense] = userMessage.split(' - ');
            if (!categoryRaw || !noteExpense) {
                throw new Error('‚ö†Ô∏è Tin nh·∫Øn kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng. H√£y nh·∫≠p: "ƒÉn u·ªëng - ƒëi ƒÉn v·ªõi ba m·∫π"');
            }

            const category = this.normalizeCategory(categoryRaw.trim());
            const expense = noteExpense.trim();

            await this.prisma.email.update({
                where: { id: email.id },
                data: {
                    category,
                    expense,
                    isRead: true,
                },
            });

            console.log(`‚úÖ ƒê√£ l∆∞u chi ti√™u: ${category} - ${expense}`);
            return true;
        } catch (error) {
            console.error('‚ùå L·ªói khi l∆∞u chi ti√™u:', error.message);
            return false;
        }
    }

    async getTotalUnreadExpense(month: number): Promise<number> {
        const currentYear = new Date().getFullYear(); // L·∫•y nƒÉm hi·ªán t·∫°i
        const startDate = new Date(currentYear, month - 1, 1); // Ng√†y ƒë·∫ßu th√°ng
        const endDate = new Date(currentYear, month, 0, 23, 59, 59); // Ng√†y cu·ªëi th√°ng

        const total = await this.prisma.email.aggregate({
            _sum: { price: true },
            where: {
                isRead: true, // Ch·ªâ l·∫•y email ch∆∞a ƒë·ªçc
                price: { lt: 0 }, // Ch·ªâ l·∫•y kho·∫£n chi ti√™u (gi·∫£m ti·ªÅn)
                createdAt: {
                    gte: startDate, // L·ªõn h∆°n ho·∫∑c b·∫±ng ng√†y ƒë·∫ßu th√°ng
                    lte: endDate,   // Nh·ªè h∆°n ho·∫∑c b·∫±ng ng√†y cu·ªëi th√°ng
                },
            },
        });

        return total._sum.price ?? 0; // Tr·∫£ v·ªÅ t·ªïng ti·ªÅn, n·∫øu null th√¨ tr·∫£ 0
    }

    async getTotal(month: number): Promise<number> {
        const currentYear = new Date().getFullYear(); // L·∫•y nƒÉm hi·ªán t·∫°i
        const startDate = new Date(currentYear, month - 1, 1); // Ng√†y ƒë·∫ßu th√°ng
        const endDate = new Date(currentYear, month, 0, 23, 59, 59); // Ng√†y cu·ªëi th√°ng

        const total = await this.prisma.email.aggregate({
            _sum: { price: true },
            where: {
                isRead: false, // Ch·ªâ l·∫•y email ch∆∞a ƒë·ªçc
                price: { gt: 0 }, // Ch·ªâ l·∫•y kho·∫£n chi ti√™u (gi·∫£m ti·ªÅn)
                createdAt: {
                    gte: startDate, // L·ªõn h∆°n ho·∫∑c b·∫±ng ng√†y ƒë·∫ßu th√°ng
                    lte: endDate,   // Nh·ªè h∆°n ho·∫∑c b·∫±ng ng√†y cu·ªëi th√°ng
                },
            },
        });

        return total._sum.price ?? 0; // Tr·∫£ v·ªÅ t·ªïng ti·ªÅn, n·∫øu null th√¨ tr·∫£ 0
    }

}
