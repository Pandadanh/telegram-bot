import os
import logging
import asyncio
import psycopg2
import subprocess
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from googleapiclient.discovery import build
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
import pickle
import speech_recognition as sr
from pydub import AudioSegment
import tempfile
import requests
import json
import google.generativeai as genai
import pytesseract
from PIL import Image
import io
from googlesearch import search
import aiohttp
from bs4 import BeautifulSoup
import re
import base64
import cloudinary
import cloudinary.uploader
import cloudinary.api
import uuid

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# Get environment variables
TOKEN = os.getenv('TELEGRAM_TOKEN')
CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

# Configure Cloudinary
cloudinary.config(
    cloud_name=os.getenv('CLOUDINARY_CLOUD_NAME'),
    api_key=os.getenv('CLOUDINARY_API_KEY'),
    api_secret=os.getenv('CLOUDINARY_API_SECRET')
)

# Database configuration
DB_CONFIG = {
    "host": os.getenv('DB_HOST'),
    "database": os.getenv('DB_NAME'),
    "user": os.getenv('DB_USER'),
    "password": os.getenv('DB_PASSWORD'),
    "port": os.getenv('DB_PORT')
}

# Gmail API configuration
SCOPES = ['https://www.googleapis.com/auth/gmail.readonly']

class EmailBot:
    def __init__(self):
        self.check = True
        self.current_email = None
        self.application = Application.builder().token(TOKEN).build()
        self.ai_report_mode = {}  # Dictionary to track AI report mode for each user
        self.search_mode = {}  # Dictionary to track search mode for each user
        self.place_search_mode = {}  # Dictionary to track place search mode for each user

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command"""
        await update.message.reply_text('Xin ch√†o! T√¥i l√† bot theo d√µi chi ti√™u. H√£y s·ª≠ d·ª•ng /help ƒë·ªÉ xem c√°c l·ªánh c√≥ s·∫µn!')

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /help command"""
        help_text = """
        üì± C√°c l·ªánh c√≥ s·∫µn:

        üîß L·ªánh C∆° B·∫£n:
        1. /help: Hi·ªÉn th·ªã c√°c l·ªánh h·ªó tr·ª£
        2. /reset_bot: Reset bot
        3. /name_love: Hi·ªÉn th·ªã t√™n ng∆∞·ªùi y√™u

        üí∞ Qu·∫£n L√Ω T√†i Ch√≠nh:
        4. /check_bot: Ki·ªÉm tra th√¥ng b√°o
        5. /check_outlay: Ki·ªÉm tra ti·ªÅn ƒë√£ ti√™u trong th√°ng
        6. /report: Xem th·ªëng k√™ chi ti√™u theo danh m·ª•c
        7. /check_outlay_web: Xem b√°o c√°o chi ti√™u tr·ª±c quan

        ü§ñ T√≠nh NƒÉng AI:
        8. /bot_ai_gen_report: B·∫≠t ch·∫ø ƒë·ªô ph√¢n t√≠ch tin nh·∫Øn tho·∫°i
        9. /bot_ai_gen_report_image: B·∫≠t ch·∫ø ƒë·ªô ph√¢n t√≠ch ·∫£nh
        10. /exit: Tho√°t ch·∫ø ƒë·ªô ph√¢n t√≠ch

        üîç T√≠nh NƒÉng T√¨m Ki·∫øm:
        11. /search: T√¨m ki·∫øm th√¥ng tin v·ªõi AI
        12. /place_search: T√¨m ki·∫øm ƒë·ªãa ƒëi·ªÉm v√† hi·ªÉn th·ªã Google Maps
        """
        await update.message.reply_text(help_text)

    async def reset_bot(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /reset_bot command"""
        try:
            # Run getDataFromGmail.py with venv python
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            await update.message.reply_text(f"üîÑ ƒêang c·∫≠p nh·∫≠t d·ªØ li·ªáu t·ª´ Gmail... ({current_time})")
            
            # Use python3 from virtual environment
            subprocess.run(['venv/bin/python3', 'getDataFromGmail.py'], check=True)
            
            # Check for unread transactions
            conn = psycopg2.connect(**DB_CONFIG)
            cursor = conn.cursor()
            
            query = """
            SELECT COUNT(*) 
            FROM "Email" 
            WHERE "isRead" = false;
            """
            
            cursor.execute(query)
            result = cursor.fetchone()
            cursor.close()
            conn.close()
            
            unread_count = result[0] if result[0] else 0
            
            if unread_count > 0:
                await update.message.reply_text(
                    f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu!\n"
                    f"üìù C√≥ {unread_count} giao d·ªãch ch∆∞a ghi ch√∫.\n"
                    f"S·ª≠ d·ª•ng /check_bot ƒë·ªÉ xem chi ti·∫øt."
                )
            else:
                await update.message.reply_text("‚úÖ ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu!\nüìù Kh√¥ng c√≥ giao d·ªãch n√†o ch∆∞a ghi ch√∫.")
            
            self.check = True
            self.current_email = None
            
        except subprocess.CalledProcessError as e:
            logging.error(f"Error running getDataFromGmail.py: {e}")
            await update.message.reply_text("‚ùå L·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu t·ª´ Gmail!")
        except Exception as e:
            logging.error(f"Error in reset_bot: {e}")
            await update.message.reply_text("‚ùå L·ªói khi reset bot!")

    async def check_bot(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /check_bot command"""
        try:
            # Get unread emails
            conn = psycopg2.connect(**DB_CONFIG)
            cursor = conn.cursor()
            
            query = """
            SELECT "emailId", "price", "note", "createdAt" 
            FROM "Email" 
            WHERE "isRead" = false 
            ORDER BY "createdAt" DESC;
            """
            
            cursor.execute(query)
            results = cursor.fetchall()
            cursor.close()
            conn.close()
            
            if results:
                message = "üìù Danh s√°ch giao d·ªãch ch∆∞a ghi ch√∫:\n\n"
                for email in results:
                    money = float(email[1])
                    status = 'gi·∫£m' if money < 0 else 'tƒÉng'
                    formatted_money = "{:,.0f}".format(abs(money))
                    created_at = email[3].strftime("%Y-%m-%d %H:%M:%S")
                    message += f"üí∞ {formatted_money} VNƒê ({status})\nüìÑ {email[2]}\nüïí {created_at}\n\n"
                
                message += "Vui l√≤ng reply ƒë·ªÉ ghi ch√∫ chi ti·∫øt theo ƒë·ªãnh d·∫°ng:\nDANH_MUC - chi ti·∫øt"
                await update.message.reply_text(message)
            else:
                await update.message.reply_text("‚úÖ Kh√¥ng c√≥ giao d·ªãch n√†o ch∆∞a ghi ch√∫!")
            
            self.check = True
        except Exception as e:
            logging.error(f"Error checking unread transactions: {e}")
            await update.message.reply_text("‚ùå L·ªói khi ki·ªÉm tra giao d·ªãch!")

    async def check_outlay(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /check_outlay command"""
        try:
            conn = psycopg2.connect(**DB_CONFIG)
            cursor = conn.cursor()
            
            query = """
            SELECT SUM("price") FROM "Email" 
            WHERE "month" = %s AND "isRead" = true AND "price" < 0;
            """
            
            cursor.execute(query, (datetime.now().month,))
            result = cursor.fetchone()
            cursor.close()
            conn.close()
            
            total = result[0] if result[0] else 0
            formatted_total = "{:,.0f}".format(total)
            await update.message.reply_text(f"‚úÖ ƒê√£ chi ti√™u trong th√°ng n√†y!\nT·ªïng: {formatted_total}")
        except Exception as e:
            logging.error(f"Error getting total expense: {e}")
            await update.message.reply_text("‚ùå L·ªói khi l·∫•y t·ªïng chi ti√™u!")

    async def report_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /report command"""
        try:
            # Get month from command arguments
            args = context.args
            if not args:
                await update.message.reply_text(
                    "‚ùå Vui l√≤ng ch·ªâ ƒë·ªãnh th√°ng!\n"
                    "C√∫ ph√°p: /report <th√°ng>\n"
                    "V√≠ d·ª•: /report 3"
                )
                return

            try:
                month = int(args[0])
                if month < 1 or month > 12:
                    await update.message.reply_text("‚ùå Th√°ng ph·∫£i t·ª´ 1 ƒë·∫øn 12!")
                    return
            except ValueError:
                await update.message.reply_text("‚ùå Th√°ng ph·∫£i l√† s·ªë!")
                return

            conn = psycopg2.connect(**DB_CONFIG)
            cursor = conn.cursor()
            
            # Get expenses grouped by category
            query = """
            SELECT 
                "category",
                COUNT(*) as transaction_count,
                SUM("price") as total_amount,
                array_agg("expense") as expenses,
                array_agg("note") as notes
            FROM "Email" 
            WHERE "month" = %s
            AND "isRead" = true
            AND "category" IS NOT NULL
            GROUP BY "category"
            ORDER BY total_amount ASC;
            """
            
            cursor.execute(query, (month,))
            results = cursor.fetchall()
            cursor.close()
            conn.close()
            
            if results:
                message = f"üìä Th·ªëng k√™ chi ti√™u th√°ng {month}:\n\n"
                total_spent = 0
                
                for category, count, amount, expenses, notes in results:
                    formatted_amount = "{:,.0f}".format(abs(amount))
                    status = 'chi' if amount < 0 else 'thu'
                    
                    message += f"üìå {category}:\n"
                    message += f"üí∞ T·ªïng: {formatted_amount} VNƒê ({status})\n"
                    message += f"üìù Chi ti·∫øt:\n"
                    
                    # Add each expense with bullet point
                    for expense, note in zip(expenses, notes):
                        if note:
                            message += f"‚Ä¢ {expense} ({note})\n"
                        else:
                            message += f"‚Ä¢ {expense}\n"
                    
                    message += "\n"
                    total_spent += amount
                
                # Add total summary
                formatted_total = "{:,.0f}".format(abs(total_spent))
                status = 'chi' if total_spent < 0 else 'thu'
                message += f"üìà T·ªïng c·ªông: {formatted_total} VNƒê ({status})"
                
                await update.message.reply_text(message)
            else:
                await update.message.reply_text(f"üìä Ch∆∞a c√≥ d·ªØ li·ªáu chi ti√™u trong th√°ng {month}!")
                
        except Exception as e:
            logging.error(f"Error generating report: {e}")
            await update.message.reply_text("‚ùå L·ªói khi t·∫°o b√°o c√°o!")

    async def name_love(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /name_love command"""
        await update.message.reply_text("‚ù§Ô∏è Ho√†ng ƒêƒÉng vs Thy Uy√™n ‚ù§Ô∏è")

    async def check_outlay_web(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /check_outlay_web command"""
        await update.message.reply_text(
            "üåê Xem b√°o c√°o chi ti√™u tr·ª±c quan t·∫°i:\n"
            "https://pandadanh.github.io/report-Financial/"
        )

    async def bot_ai_gen_report(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /bot_ai_gen_report command"""
        user_id = update.effective_user.id
        self.ai_report_mode[user_id] = True
        
        await update.message.reply_text(
            "ü§ñ Ch·∫ø ƒë·ªô t·∫°o b√°o c√°o AI ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t!\n\n"
            "B·∫°n c√≥ th·ªÉ g·ª≠i tin nh·∫Øn tho·∫°i ƒë·ªÉ t√¥i ph√¢n t√≠ch.\n"
            "M·ªói tin nh·∫Øn tho·∫°i s·∫Ω ƒë∆∞·ª£c ph√¢n t√≠ch th√†nh 3 ph·∫ßn:\n"
            "1. H√¥m qua ƒë√£ l√†m g√¨\n"
            "2. H√¥m nay s·∫Ω l√†m g√¨\n"
            "3. Nh·ªØng kh√≥ khƒÉn\n"
        )

    async def search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /search command"""
        user_id = update.effective_user.id
        self.search_mode[user_id] = True
        
        await update.message.reply_text(
            "üîç Ch·∫ø ƒë·ªô t√¨m ki·∫øm ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t!\n\n"
            "B·∫°n mu·ªën t√¨m ki·∫øm g√¨?"
        )

    async def place_search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /place_search command"""
        user_id = update.effective_user.id
        self.place_search_mode[user_id] = True
        
        await update.message.reply_text(
            "üìç Ch·∫ø ƒë·ªô t√¨m ki·∫øm ƒë·ªãa ƒëi·ªÉm ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t!\n\n"
            "B·∫°n mu·ªën t√¨m ki·∫øm ƒë·ªãa ƒëi·ªÉm g√¨?"
        )

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle incoming messages"""
        try:
            message = update.message.text
            user_id = update.effective_user.id
            reply_to_message = update.message.reply_to_message

            # Check if user is in search mode
            if user_id in self.search_mode:
                await self.process_search_query(update, message)
                return

            # Check if user is in place search mode
            if user_id in self.place_search_mode:
                await self.process_place_search_query(update, message)
                return

            if reply_to_message:
                try:
                    # Log the received message for debugging
                    logging.info(f"Received reply message: {message}")
                    
                    # Validate reply syntax
                    if ' - ' not in message:
                        await update.message.reply_text(
                            "‚ùå C√∫ ph√°p kh√¥ng ƒë√∫ng!\n"
                            "Vui l√≤ng nh·∫≠p theo ƒë·ªãnh d·∫°ng:\n"
                            "DANH_MUC - chi ti·∫øt\n"
                            "V√≠ d·ª•: MUA_SAM - mua qu·∫ßn √°o",
                            quote=False
                        )
                        return

                    # Parse reply message
                    category, expense = message.split(' - ', 1)
                    category = category.strip().upper()
                    expense = expense.strip()

                    # Log parsed data
                    logging.info(f"Parsed category: {category}, expense: {expense}")

                    # Validate category and expense
                    if not category or not expense:
                        await update.message.reply_text(
                            "‚ùå Danh m·ª•c ho·∫∑c chi ti·∫øt kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!\n"
                            "Vui l√≤ng nh·∫≠p theo ƒë·ªãnh d·∫°ng:\n"
                            "DANH_MUC - chi ti·∫øt\n"
                            "V√≠ d·ª•: MUA_SAM - mua qu·∫ßn √°o",
                            quote=False
                        )
                        return

                    # Extract transaction info from replied message
                    replied_text = reply_to_message.text
                    price_match = re.search(r'(\d+(?:,\d+)*) VNƒê', replied_text)
                    note_match = re.search(r'N·ªôi dung: (.+?)(?:\n|$)', replied_text)
                    
                    if not price_match or not note_match:
                        await update.message.reply_text(
                            "‚ùå Kh√¥ng th·ªÉ t√¨m th·∫•y th√¥ng tin giao d·ªãch trong tin nh·∫Øn ƒë∆∞·ª£c tr·∫£ l·ªùi!",
                            quote=False
                        )
                        return
                        
                    # Convert price string to number
                    price_str = price_match.group(1).replace(',', '')
                    price = float(price_str)
                    if 'gi·∫£m' in replied_text:
                        price = -price
                        
                    note = note_match.group(1).strip()
                    
                    # Save reply as note with category and expense
                    conn = psycopg2.connect(**DB_CONFIG)
                    cursor = conn.cursor()
                    
                    try:
                        # Find the transaction in database
                        query = """
                        SELECT "emailId" FROM "Email"
                        WHERE "price" = %s AND "note" = %s AND "isRead" = false
                        ORDER BY "createdAt" DESC LIMIT 1;
                        """
                        
                        cursor.execute(query, (price, note))
                        result = cursor.fetchone()
                        
                        if not result:
                            await update.message.reply_text(
                                "‚ùå Kh√¥ng t√¨m th·∫•y giao d·ªãch t∆∞∆°ng ·ª©ng trong c∆° s·ªü d·ªØ li·ªáu!",
                                quote=False
                            )
                            return
                            
                        # Update the transaction
                        update_query = """
                        UPDATE "Email" 
                        SET "isRead" = true,
                            "category" = %s,
                            "expense" = %s
                        WHERE "emailId" = %s
                        RETURNING "emailId";
                        """
                        
                        cursor.execute(update_query, (category, expense, result[0]))
                        update_result = cursor.fetchone()
                        conn.commit()
                        
                        if update_result:
                            # Get total expense after update
                            total = await self.get_total_expense()
                            formatted_total = "{:,.0f}".format(abs(total))
                            
                            # Send success messages
                            await update.message.reply_text(
                                f"‚úÖ ƒê√£ l∆∞u th√¥ng tin chi ti√™u!\nDanh m·ª•c: {category}\nChi ti·∫øt: {expense}",
                                quote=False
                            )
                            
                            await update.message.reply_text(
                                f"üí∞ T·ªïng chi ti√™u trong th√°ng n√†y: {formatted_total} VNƒê",
                                quote=False
                            )
                        else:
                            await update.message.reply_text(
                                "‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin! Vui l√≤ng th·ª≠ l·∫°i.",
                                quote=False
                            )
                            
                    except Exception as e:
                        logging.error(f"Database error: {str(e)}")
                        await update.message.reply_text(
                            "‚ùå L·ªói khi c·∫≠p nh·∫≠t c∆° s·ªü d·ªØ li·ªáu! Vui l√≤ng th·ª≠ l·∫°i.",
                            quote=False
                        )
                        conn.rollback()
                    finally:
                        cursor.close()
                        conn.close()
                    
                except Exception as e:
                    logging.error(f"Error processing reply: {str(e)}")
                    await update.message.reply_text(
                        "‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω ph·∫£n h·ªìi! Vui l√≤ng th·ª≠ l·∫°i.",
                        quote=False
                    )
            else:
                if message in ['/reset_bot', 'Reset-bot']:
                    self.check = True
                    self.current_email = None
                    await update.message.reply_text("‚úÖ Bot ƒë√£ ƒë∆∞·ª£c reset!")
                elif message in ['/check_bot', 'Check-bot']:
                    await self.check_bot(update, context)
                elif message in ['/check_outlay', 'Check-outlay']:
                    await self.check_outlay(update, context)
                elif message in ['/report', 'Report']:
                    await self.report_command(update, context)
                elif message in ['/help', 'help']:
                    await self.help_command(update, context)
                elif message in ['/name_love', 'Name-love']:
                    await self.name_love(update, context)
                elif message in ['/check_outlay_web', 'Check-outlay-web']:
                    await self.check_outlay_web(update, context)
                elif message in ['/bot_ai_gen_report', 'Bot-AI-gen-report']:
                    await self.bot_ai_gen_report(update, context)
                elif message in ['/search', 'Search']:
                    await self.search_command(update, context)
                elif message in ['/place_search', 'Place-search']:
                    await self.place_search_command(update, context)
                else:
                    await update.message.reply_text("‚ùå L·ªánh kh√¥ng h·ª£p l·ªá. H√£y th·ª≠ /help ƒë·ªÉ xem danh s√°ch l·ªánh h·ªó tr·ª£!")

        except Exception as e:
            logging.error(f"Error handling message: {e}")

    async def process_search_query(self, update: Update, query: str):
        """Process a search query and ask for more"""
        try:
            user_id = update.effective_user.id
            # Configure Gemini API
            genai.configure(api_key=os.getenv('GOOGLE_API_KEY'))
            model = genai.GenerativeModel('gemini-2.0-flash')
            
            # Create prompt for enhancing search query
            prompt = f"""
            H√£y t·∫°o c√¢u truy v·∫•n t√¨m ki·∫øm chi ti·∫øt v√† ƒë·∫ßy ƒë·ªß h∆°n t·ª´ c√¢u truy v·∫•n sau:
            "{query}"
            
            H√£y:
            1. Th√™m c√°c t·ª´ kh√≥a li√™n quan
            2. L√†m r√µ m·ª•c ƒë√≠ch t√¨m ki·∫øm
            3. Th√™m c√°c ti√™u ch√≠ c·ª• th·ªÉ
            4. Gi·ªØ nguy√™n √Ω nghƒ©a g·ªëc
            
            Ch·ªâ tr·∫£ v·ªÅ c√¢u truy v·∫•n ƒë√£ ƒë∆∞·ª£c c·∫£i thi·ªán, kh√¥ng th√™m gi·∫£i th√≠ch.
            """
            
            # Generate enhanced query using Gemini
            response = model.generate_content(prompt)
            enhanced_query = response.text.strip()
            
            # Send initial message
            await update.message.reply_text(
                f"üîç ƒêang t√¨m ki·∫øm v·ªõi c√¢u truy v·∫•n:\n{enhanced_query}\n\n"
                "Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t..."
            )
            
            # Perform web search
            search_results = []
            async with aiohttp.ClientSession() as session:
                # Get top 5 search results
                for url in search(enhanced_query, num_results=5):
                    try:
                        async with session.get(url, timeout=10) as response:
                            if response.status == 200:
                                html = await response.text()
                                soup = BeautifulSoup(html, 'html.parser')
                                
                                # Extract title
                                title = soup.title.string if soup.title else url
                                
                                # Extract description
                                meta_desc = soup.find('meta', {'name': 'description'})
                                description = meta_desc['content'] if meta_desc else "Kh√¥ng c√≥ m√¥ t·∫£"
                                
                                # Clean up text
                                title = re.sub(r'\s+', ' ', title).strip()
                                description = re.sub(r'\s+', ' ', description).strip()
                                
                                search_results.append({
                                    'title': title,
                                    'description': description,
                                    'url': url
                                })
                    except Exception as e:
                        logging.error(f"Error fetching {url}: {e}")
                        continue
            
            # Format and send results
            if search_results:
                message = "üìä K·∫øt qu·∫£ t√¨m ki·∫øm:\n\n"
                for i, result in enumerate(search_results, 1):
                    message += f"{i}. {result['title']}\n"
                    message += f"üìù {result['description']}\n"
                    message += f"üîó {result['url']}\n\n"
                
                message += "B·∫°n c√≥ th·ªÉ d√πng l·ªánh /search ƒë·ªÉ t√¨m ki·∫øm ti·∫øp."
                await update.message.reply_text(message)
            else:
                await update.message.reply_text(
                    "‚ùå Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o!\n\n"
                    "B·∫°n c√≥ th·ªÉ d√πng l·ªánh /search ƒë·ªÉ t√¨m ki·∫øm l·∫°i."
                )
            
            # Automatically exit search mode
            if user_id in self.search_mode:
                del self.search_mode[user_id]
                
        except Exception as e:
            await update.message.reply_text(
                "‚ùå C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm!\n\n"
                "B·∫°n c√≥ th·ªÉ d√πng l·ªánh /search ƒë·ªÉ th·ª≠ l·∫°i."
            )
            # Ensure we exit search mode even on error
            if user_id in self.search_mode:
                del self.search_mode[user_id]
            logging.error(f"Error in search: {e}")

    async def get_total_expense(self):
        """Get total expense for current month"""
        try:
            conn = psycopg2.connect(**DB_CONFIG)
            cursor = conn.cursor()
            
            query = """
            SELECT SUM("price") FROM "Email" 
            WHERE "month" = %s AND "isRead" = true;
            """
            
            cursor.execute(query, (datetime.now().month,))
            result = cursor.fetchone()
            cursor.close()
            conn.close()
            
            return result[0] if result[0] else 0
        except Exception as e:
            logging.error(f"Error getting total expense: {e}")
            return 0

    async def run_gmail_script(self):
        """Run getDataFromGmail.py every hour"""
        while True:
            try:
                current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                logging.info(f"Running getDataFromGmail.py at {current_time}")
                # Use python3 from virtual environment
                subprocess.run(['venv/bin/python3', 'getDataFromGmail.py'], check=True)
                logging.info("getDataFromGmail.py completed successfully")
            except subprocess.CalledProcessError as e:
                logging.error(f"Error running getDataFromGmail.py: {e}")
            except Exception as e:
                logging.error(f"Unexpected error: {e}")
            
            await asyncio.sleep(3600)  # Wait for 1 hour

    async def check_unread_transactions(self):
        """Check for unread transactions every 15 seconds"""
        while True:
            try:
                # Get unread email
                conn = psycopg2.connect(**DB_CONFIG)
                cursor = conn.cursor()
                
                query = """
                SELECT "emailId", "price", "note" 
                FROM "Email" 
                WHERE "isRead" = false 
                ORDER BY "createdAt" DESC 
                LIMIT 1;
                """
                
                cursor.execute(query)
                result = cursor.fetchone()
                cursor.close()
                conn.close()
                
                if result and self.check:  # Only send if we have an unread email and check is True
                    self.current_email = {
                        "emailId": result[0],
                        "price": result[1],
                        "note": result[2]
                    }
                    
                    # Send notification
                    money = float(self.current_email["price"])
                    status = 'gi·∫£m' if money < 0 else 'tƒÉng'
                    formatted_money = "{:,.0f}".format(abs(money))
                    message = f"Ch√†o Ho√†ng ƒêƒÉng\nT√†i kho·∫£n c·ªßa b·∫°n ƒë√£ {status} {formatted_money} VNƒê\nN·ªôi dung: {self.current_email['note']}\nCho t√¥i bi·∫øt l√Ω do chi ti√™u c·ªßa b·∫°n nha!"
                    
                    await self.application.bot.send_message(chat_id=CHAT_ID, text=message)
                    self.check = False
                    logging.info(f"Sent notification for transaction: {formatted_money} VNƒê")
                    
                    # Start auto-resend task
                    asyncio.create_task(self.auto_resend_notification())
            
            except Exception as e:
                logging.error(f"Error checking unread transactions: {e}")
            
            await asyncio.sleep(15)  # Wait for 15 seconds

    async def auto_resend_notification(self):
        """Auto resend notification after 5 seconds if no response"""
        while self.current_email and not self.check:
            await asyncio.sleep(15)  # Wait for 5 seconds
            
            # Check if email is still unread
            try:
                conn = psycopg2.connect(**DB_CONFIG)
                cursor = conn.cursor()
                
                query = """
                SELECT "isRead" FROM "Email" 
                WHERE "emailId" = %s;
                """
                
                cursor.execute(query, (self.current_email["emailId"],))
                result = cursor.fetchone()
                cursor.close()
                conn.close()
                
                if result and not result[0]:  # If still unread
                    # Resend notification
                    money = float(self.current_email["price"])
                    status = 'gi·∫£m' if money < 0 else 'tƒÉng'
                    formatted_money = "{:,.0f}".format(abs(money))
                    message = f"Ch√†o Ho√†ng ƒêƒÉng\nT√†i kho·∫£n c·ªßa b·∫°n ƒë√£ {status} {formatted_money} VNƒê\nN·ªôi dung: {self.current_email['note']}\nCho t√¥i bi·∫øt l√Ω do chi ti√™u c·ªßa b·∫°n nha!"
                    
                    await self.application.bot.send_message(chat_id=CHAT_ID, text=message)
                    logging.info(f"Re-sent notification for transaction: {formatted_money} VNƒê")
                else:
                    break  # Stop if email is read
                    
            except Exception as e:
                logging.error(f"Error in auto-resend: {e}")
                break

    async def handle_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle voice messages"""
        try:
            user_id = update.effective_user.id
            
            # Check if user is in AI report mode
            if user_id not in self.ai_report_mode:
                await update.message.reply_text(
                    "‚ùå B·∫°n c·∫ßn s·ª≠ d·ª•ng l·ªánh /bot_ai_gen_report tr∆∞·ªõc khi g·ª≠i tin nh·∫Øn tho·∫°i!"
                )
                return
                
            # Check if the message is a text message with /exit
            if update.message.text and update.message.text.lower() == '/exit':
                await self.exit_ai_report(update, context)
                return

            # Download the voice message
            voice = update.message.voice
            voice_file = await context.bot.get_file(voice.file_id)
            
            # Create temporary files for audio processing
            with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as ogg_file, \
                 tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as wav_file:
                
                # Download voice message as OGG file
                await voice_file.download_to_drive(ogg_file.name)
                
                # Convert OGG to WAV using pydub
                audio = AudioSegment.from_ogg(ogg_file.name)
                audio.export(wav_file.name, format="wav")
                
                # Initialize speech recognition
                recognizer = sr.Recognizer()
                
                # Transcribe audio to text
                with sr.AudioFile(wav_file.name) as source:
                    audio_data = recognizer.record(source)
                    text = recognizer.recognize_google(audio_data, language='vi-VN')  # Vietnamese language
                    
                    # Configure Gemini API
                    genai.configure(api_key=os.getenv('GOOGLE_API_KEY'))
                    model = genai.GenerativeModel('gemini-2.0-flash')
                    
                    # Create prompt for analysis
                    prompt = f"""
                    H√£y ph√¢n t√≠ch v√† t√≥m t·∫Øt n·ªôi dung sau th√†nh 3 ph·∫ßn:
                    1. H√¥m qua ƒë√£ l√†m g√¨
                    2. H√¥m nay s·∫Ω l√†m g√¨
                    3. Nh·ªØng kh√≥ khƒÉn
                    
                    N·ªôi dung: {text}
                    
                    H√£y tr·∫£ l·ªùi theo ƒë·ªãnh d·∫°ng:
                    H√îM QUA:
                    - ƒêi·ªÉm 1
                    - ƒêi·ªÉm 2
                    ...
                    
                    H√îM NAY:
                    - ƒêi·ªÉm 1
                    - ƒêi·ªÉm 2
                    ...
                    
                    KH√ì KHƒÇN:
                    - ƒêi·ªÉm 1
                    - ƒêi·ªÉm 2
                    ...
                    """
                    
                    # Generate response using Gemini
                    response = model.generate_content(prompt)
                    
                    if response.text:
                        # Send both original transcription and AI summary
                        await update.message.reply_text(
                            "üé§ N·ªôi dung tin nh·∫Øn tho·∫°i c·ªßa b·∫°n:\n\n"
                            f"üìù {text}\n\n"
                            "ü§ñ Ph√¢n t√≠ch AI:\n\n"
                            f"{response.text}\n\n"
                            "G·ª≠i tin nh·∫Øn tho·∫°i kh√°c ho·∫∑c /exit ƒë·ªÉ tho√°t."
                        )
                    else:
                        # If AI analysis fails, just send the transcription
                        await update.message.reply_text(
                            "üé§ N·ªôi dung tin nh·∫Øn tho·∫°i c·ªßa b·∫°n:\n\n"
                            f"üìù {text}\n\n"
                            "‚ùå Kh√¥ng th·ªÉ ph√¢n t√≠ch AI l√∫c n√†y.\n"
                            "G·ª≠i tin nh·∫Øn tho·∫°i kh√°c ho·∫∑c /exit ƒë·ªÉ tho√°t."
                        )
                
                # Clean up temporary files
                os.unlink(ogg_file.name)
                os.unlink(wav_file.name)
                
        except sr.UnknownValueError:
            await update.message.reply_text("‚ùå Kh√¥ng th·ªÉ nh·∫≠n d·∫°ng gi·ªçng n√≥i. Vui l√≤ng th·ª≠ l·∫°i!")
        except sr.RequestError as e:
            await update.message.reply_text("‚ùå L·ªói khi k·∫øt n·ªëi v·ªõi d·ªãch v·ª• nh·∫≠n d·∫°ng gi·ªçng n√≥i!")
            logging.error(f"Speech recognition error: {e}")
        except Exception as e:
            await update.message.reply_text("‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω tin nh·∫Øn tho·∫°i!")
            logging.error(f"Error handling voice message: {e}")

    async def bot_ai_gen_report_image(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /bot_ai_gen_report_image command"""
        user_id = update.effective_user.id
        self.ai_report_mode[user_id] = 'image'
        
        await update.message.reply_text(
            "ü§ñ Ch·∫ø ƒë·ªô ph√¢n t√≠ch ·∫£nh ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t!\n\n"
            "B·∫°n c√≥ th·ªÉ g·ª≠i ·∫£nh ƒë·ªÉ t√¥i ph√¢n t√≠ch.\n"
            "T√¥i s·∫Ω:\n"
            "1. Chuy·ªÉn ·∫£nh th√†nh vƒÉn b·∫£n\n"
            "2. ƒê·ªãnh d·∫°ng vƒÉn b·∫£n\n"
            "3. G·ª≠i l·∫°i k·∫øt qu·∫£\n"
        )

    async def handle_image(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle image messages"""
        try:
            user_id = update.effective_user.id
            
            # Check if user is in image analysis mode
            if user_id in self.ai_report_mode and self.ai_report_mode[user_id] == 'image':
                # Check if the message is a text message with /exit
                if update.message.text and update.message.text.lower() == '/exit':
                    await self.exit_ai_report(update, context)
                    return
                    
                # Get the image file
                photo = update.message.photo[-1]  # Get the largest size
                file = await context.bot.get_file(photo.file_id)
                
                # Download the image
                image_bytes = await file.download_as_bytearray()
                
                # Convert to PIL Image
                image = Image.open(io.BytesIO(image_bytes))
                
                # Extract text using OCR
                text = pytesseract.image_to_string(image, lang='vie')
                
                if not text.strip():
                    await update.message.reply_text("‚ùå Kh√¥ng th·ªÉ nh·∫≠n d·∫°ng vƒÉn b·∫£n t·ª´ ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i!")
                    return
                
                # Configure Gemini API
                genai.configure(api_key=os.getenv('GOOGLE_API_KEY'))
                model = genai.GenerativeModel('gemini-2.0-flash')
                
                # Create prompt for formatting
                prompt = f"""
                H√£y ƒë·ªãnh d·∫°ng v√† l√†m r√µ vƒÉn b·∫£n sau m·ªôt c√°ch chuy√™n nghi·ªáp v√† d·ªÖ ƒë·ªçc:
                
                {text}
                
                H√£y:
                1. S·ª≠a l·ªói ch√≠nh t·∫£
                2. Th√™m d·∫•u c√¢u n·∫øu c·∫ßn
                3. ƒê·ªãnh d·∫°ng l·∫°i c·∫•u tr√∫c c√¢u
                4. Gi·ªØ nguy√™n √Ω nghƒ©a g·ªëc
                """
                
                # Generate formatted text using Gemini
                response = model.generate_content(prompt)
                
                if response.text:
                    await update.message.reply_text(
                        "üì∏ VƒÉn b·∫£n t·ª´ ·∫£nh c·ªßa b·∫°n:\n\n"
                        f"üìù {text}\n\n"
                        "‚ú® VƒÉn b·∫£n ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng:\n\n"
                        f"{response.text}\n\n"
                        "G·ª≠i ·∫£nh kh√°c ho·∫∑c /exit ƒë·ªÉ tho√°t."
                    )
                else:
                    await update.message.reply_text(
                        "üì∏ VƒÉn b·∫£n t·ª´ ·∫£nh c·ªßa b·∫°n:\n\n"
                        f"üìù {text}\n\n"
                        "‚ùå Kh√¥ng th·ªÉ ƒë·ªãnh d·∫°ng vƒÉn b·∫£n l√∫c n√†y.\n"
                        "G·ª≠i ·∫£nh kh√°c ho·∫∑c /exit ƒë·ªÉ tho√°t."
                    )
                
        except Exception as e:
            await update.message.reply_text("‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω ·∫£nh!")
            logging.error(f"Error handling image: {e}")

    async def process_place_search_query(self, update: Update, query: str):
        """Process a place search query and ask for more"""
        try:
            # Configure Gemini API
            genai.configure(api_key=os.getenv('GOOGLE_API_KEY'))
            model = genai.GenerativeModel('gemini-2.0-flash')
            
            # Create prompt for enhancing search query
            prompt = f"""
            H√£y t·∫°o c√¢u truy v·∫•n t√¨m ki·∫øm ƒë·ªãa ƒëi·ªÉm chi ti·∫øt v√† ƒë·∫ßy ƒë·ªß h∆°n t·ª´ c√¢u truy v·∫•n sau:
            "{query}"
            
            H√£y:
            1. Th√™m t·ª´ kh√≥a "location" ho·∫∑c "place"
            2. Th√™m t·ª´ kh√≥a "address" ho·∫∑c "ƒë·ªãa ch·ªâ"
            3. Th√™m t·ª´ kh√≥a "review" ho·∫∑c "ƒë√°nh gi√°"
            4. Gi·ªØ nguy√™n √Ω nghƒ©a g·ªëc
            
            Ch·ªâ tr·∫£ v·ªÅ c√¢u truy v·∫•n ƒë√£ ƒë∆∞·ª£c c·∫£i thi·ªán, kh√¥ng th√™m gi·∫£i th√≠ch.
            """
            
            # Generate enhanced query using Gemini
            response = model.generate_content(prompt)
            enhanced_query = response.text.strip()
            
            # Send initial message
            await update.message.reply_text(
                f"üîç ƒêang t√¨m ki·∫øm ƒë·ªãa ƒëi·ªÉm v·ªõi c√¢u truy v·∫•n:\n{enhanced_query}\n\n"
                "Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t..."
            )
            
            # Perform web search
            search_results = []
            async with aiohttp.ClientSession() as session:
                # Get top 5 search results
                for url in search(enhanced_query, num_results=5):
                    try:
                        async with session.get(url, timeout=10) as response:
                            if response.status == 200:
                                html = await response.text()
                                soup = BeautifulSoup(html, 'html.parser')
                                
                                # Extract title
                                title = soup.title.string if soup.title else url
                                
                                # Extract description
                                meta_desc = soup.find('meta', {'name': 'description'})
                                description = meta_desc['content'] if meta_desc else "Kh√¥ng c√≥ m√¥ t·∫£"
                                
                                # Clean up text
                                title = re.sub(r'\s+', ' ', title).strip()
                                description = re.sub(r'\s+', ' ', description).strip()
                                
                                # Create Google Maps search URL
                                maps_query = f"{title} {description}"
                                maps_query = re.sub(r'[^\w\s]', '', maps_query)  # Remove special characters
                                maps_url = f"https://www.google.com/maps/search/{maps_query.replace(' ', '+')}"
                                
                                search_results.append({
                                    'title': title,
                                    'description': description,
                                    'url': url,
                                    'maps_url': maps_url
                                })
                    except Exception as e:
                        logging.error(f"Error fetching {url}: {e}")
                        continue
            
            # Format and send results
            if search_results:
                message = "üìç K·∫øt qu·∫£ t√¨m ki·∫øm ƒë·ªãa ƒëi·ªÉm:\n\n"
                for i, result in enumerate(search_results, 1):
                    message += f"{i}. {result['title']}\n"
                    message += f"üìù {result['description']}\n"
                    message += f"üîó {result['url']}\n"
                    message += f"üó∫Ô∏è Google Maps: {result['maps_url']}\n\n"
                
                message += "B·∫°n mu·ªën t√¨m ki·∫øm ƒë·ªãa ƒëi·ªÉm n√†o n·ªØa kh√¥ng?\nG·ª≠i /exit ƒë·ªÉ tho√°t ch·∫ø ƒë·ªô t√¨m ki·∫øm."
                await update.message.reply_text(message)
            else:
                await update.message.reply_text(
                    "‚ùå Kh√¥ng t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm n√†o!\n\n"
                    "B·∫°n mu·ªën t√¨m ki·∫øm ƒë·ªãa ƒëi·ªÉm n√†o n·ªØa kh√¥ng?\nG·ª≠i /exit ƒë·ªÉ tho√°t ch·∫ø ƒë·ªô t√¨m ki·∫øm."
                )
                
        except Exception as e:
            await update.message.reply_text(
                "‚ùå C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm ƒë·ªãa ƒëi·ªÉm!\n\n"
                "B·∫°n mu·ªën t√¨m ki·∫øm ƒë·ªãa ƒëi·ªÉm n√†o n·ªØa kh√¥ng?\nG·ª≠i /exit ƒë·ªÉ tho√°t ch·∫ø ƒë·ªô t√¨m ki·∫øm."
            )
            logging.error(f"Error in place search: {e}")

    def run(self):
        """Start the bot and the schedulers"""
        # Add handlers
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("reset_bot", self.reset_bot))
        self.application.add_handler(CommandHandler("check_bot", self.check_bot))
        self.application.add_handler(CommandHandler("check_outlay", self.check_outlay))
        self.application.add_handler(CommandHandler("report", self.report_command))
        self.application.add_handler(CommandHandler("name_love", self.name_love))
        self.application.add_handler(CommandHandler("check_outlay_web", self.check_outlay_web))
        self.application.add_handler(CommandHandler("bot_ai_gen_report", self.bot_ai_gen_report))
        self.application.add_handler(CommandHandler("bot_ai_gen_report_image", self.bot_ai_gen_report_image))
        self.application.add_handler(CommandHandler("search", self.search_command))
        self.application.add_handler(CommandHandler("place_search", self.place_search_command))
        
        # Add message handlers
        self.application.add_handler(MessageHandler(filters.VOICE, self.handle_voice))
        self.application.add_handler(MessageHandler(filters.PHOTO, self.handle_image))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

        # Create event loop
        loop = asyncio.get_event_loop()
        
        # Start both schedulers
        loop.create_task(self.run_gmail_script())
        loop.create_task(self.check_unread_transactions())
        
        # Start the bot
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    bot = EmailBot()
    bot.run()