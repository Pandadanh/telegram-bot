"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListenersExplorerService = void 0;
const tslib_1 = require("tslib");
const debug_1 = require("debug");
const log = (0, debug_1.default)('nestjs-grammy:listeners-explorer.service');
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const metadata_scanner_1 = require("@nestjs/core/metadata-scanner");
const external_context_creator_1 = require("@nestjs/core/helpers/external-context-creator");
const metadata_accessor_service_1 = require("./metadata-accessor.service");
const nestjs_grammy_constants_1 = require("../nestjs-grammy.constants");
const base_explorer_service_1 = require("./base-explorer.service");
const grammy_params_factory_1 = require("../factories/grammy-params-factory");
let ListenersExplorerService = class ListenersExplorerService extends base_explorer_service_1.BaseExplorerService {
    constructor(grammyOptions, botName, moduleRef, discoveryService, metadataAccessor, metadataScanner, modulesContainer, externalContextCreator) {
        super();
        this.grammyOptions = grammyOptions;
        this.botName = botName;
        this.moduleRef = moduleRef;
        this.discoveryService = discoveryService;
        this.metadataAccessor = metadataAccessor;
        this.metadataScanner = metadataScanner;
        this.modulesContainer = modulesContainer;
        this.externalContextCreator = externalContextCreator;
        this.grammyParamsFactory = new grammy_params_factory_1.GrammyParamsFactory();
    }
    onModuleInit() {
        this.bot = this.moduleRef.get(this.botName, {
            strict: false,
        });
        this.explore();
        if (!this.grammyOptions.useWebhook) {
            log('pollingOptions: ', this.grammyOptions.pollingOptions);
            this.bot.start(this.grammyOptions.pollingOptions || {});
        }
    }
    explore() {
        const modules = this.getModules(this.modulesContainer, this.grammyOptions.include || []);
        this.registerUpdates(modules);
    }
    registerUpdates(modules) {
        const updates = this.flatMap(modules, instance => this.filterUpdates(instance));
        updates.forEach(wrapper => this.registerListeners(this.bot, wrapper));
    }
    filterUpdates(wrapper) {
        const { instance } = wrapper;
        if (!instance)
            return undefined;
        const isUpdate = this.metadataAccessor.isUpdate(wrapper.metatype);
        if (!isUpdate)
            return undefined;
        return wrapper;
    }
    registerListeners(composer, wrapper) {
        const { instance } = wrapper;
        const prototype = Object.getPrototypeOf(instance);
        this.metadataScanner.scanFromPrototype(instance, prototype, name => this.registerIfListener(composer, instance, prototype, name));
    }
    registerIfListener(composer, instance, prototype, methodName, defaultMetadata) {
        const methodRef = prototype[methodName];
        const metadata = this.metadataAccessor.getListenerMetadata(methodRef) || defaultMetadata;
        if (!metadata || metadata.length < 1) {
            return undefined;
        }
        const listenerCallbackFn = this.createContextCallback(instance, prototype, methodName);
        // TODO: do we do anything with args?
        for (const { method, emitter } of metadata) {
            log(`Setting up listener for bot.${emitter}('${method}')`);
            this.bot[emitter](method, listenerCallbackFn);
        }
    }
    createContextCallback(instance, prototype, methodName) {
        const paramsFactory = this.grammyParamsFactory;
        const resolverCallback = this.externalContextCreator.create(instance, prototype[methodName], methodName, nestjs_grammy_constants_1.PARAM_ARGS_METADATA, paramsFactory, undefined, undefined, undefined, 'grammy');
        return resolverCallback;
    }
};
ListenersExplorerService = tslib_1.__decorate([
    (0, common_1.Injectable)(),
    tslib_1.__param(0, (0, common_1.Inject)(nestjs_grammy_constants_1.GRAMMY_MODULE_OPTIONS)),
    tslib_1.__param(1, (0, common_1.Inject)(nestjs_grammy_constants_1.GRAMMY_BOT_NAME)),
    tslib_1.__metadata("design:paramtypes", [Object, String, core_1.ModuleRef,
        core_1.DiscoveryService,
        metadata_accessor_service_1.MetadataAccessorService,
        metadata_scanner_1.MetadataScanner,
        core_1.ModulesContainer,
        external_context_creator_1.ExternalContextCreator])
], ListenersExplorerService);
exports.ListenersExplorerService = ListenersExplorerService;
//# sourceMappingURL=listeners-explorer.service.js.map