"use strict";
var GrammyCoreModule_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrammyCoreModule = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@nestjs/core");
const common_1 = require("@nestjs/common");
const nestjs_grammy_constants_1 = require("./nestjs-grammy.constants");
const services_1 = require("./services");
const utils_1 = require("./utils");
const debug_1 = require("debug");
const log = (0, debug_1.default)('nestjs-grammy:core:module');
let GrammyCoreModule = GrammyCoreModule_1 = class GrammyCoreModule {
    constructor(botName, moduleRef) {
        this.botName = botName;
        this.moduleRef = moduleRef;
        log(`Core module started with botName=${botName}`);
    }
    static forRoot(options) {
        const grammyBotName = (0, utils_1.getBotName)(options.botName);
        const grammyBotNameProvider = {
            provide: nestjs_grammy_constants_1.GRAMMY_BOT_NAME,
            useValue: grammyBotName,
        };
        const grammyBotProvider = {
            provide: grammyBotName,
            useFactory: () => tslib_1.__awaiter(this, void 0, void 0, function* () { return yield (0, utils_1.createBotFactory)(options); }),
        };
        return {
            module: GrammyCoreModule_1,
            providers: [
                {
                    provide: nestjs_grammy_constants_1.GRAMMY_MODULE_OPTIONS,
                    useValue: options,
                },
                grammyBotNameProvider,
                grammyBotProvider,
            ],
            exports: [grammyBotNameProvider, grammyBotProvider],
        };
    }
    static forRootAsync(options) {
        const grammyBotName = (0, utils_1.getBotName)(options.botName);
        const grammyBotNameProvider = {
            provide: nestjs_grammy_constants_1.GRAMMY_BOT_NAME,
            useValue: grammyBotName,
        };
        const grammyBotProvider = {
            provide: grammyBotName,
            useFactory: (options) => tslib_1.__awaiter(this, void 0, void 0, function* () { return yield (0, utils_1.createBotFactory)(options); }),
            inject: [nestjs_grammy_constants_1.GRAMMY_MODULE_OPTIONS],
        };
        const asyncProviders = this.createAsyncProviders(options);
        return {
            module: GrammyCoreModule_1,
            imports: options.imports,
            providers: [...asyncProviders, grammyBotNameProvider, grammyBotProvider],
            exports: [grammyBotNameProvider, grammyBotProvider],
        };
    }
    onApplicationShutdown() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            log(`GrammyCoreModule: ${this.botName} shutting down`);
            const bot = this.moduleRef.get(this.botName);
            bot && (yield bot.stop());
        });
    }
    static createAsyncProviders(options) {
        if (options.useExisting || options.useFactory) {
            return [this.createAsyncOptionsProvider(options)];
        }
        const useClass = options.useClass;
        return [
            this.createAsyncOptionsProvider(options),
            {
                provide: useClass,
                useClass,
            },
        ];
    }
    static createAsyncOptionsProvider(options) {
        if (options.useFactory) {
            return {
                provide: nestjs_grammy_constants_1.GRAMMY_MODULE_OPTIONS,
                useFactory: options.useFactory,
                inject: options.inject || [],
            };
        }
        // `as Type<GrammyOptionsFactory>` is a workaround for microsoft/TypeScript#31603
        const inject = [(options.useClass || options.useExisting)];
        return {
            provide: nestjs_grammy_constants_1.GRAMMY_MODULE_OPTIONS,
            useFactory: (optionsFactory) => tslib_1.__awaiter(this, void 0, void 0, function* () { return yield optionsFactory.createGrammyOptions(); }),
            inject,
        };
    }
};
GrammyCoreModule = GrammyCoreModule_1 = tslib_1.__decorate([
    (0, common_1.Global)(),
    (0, common_1.Module)({
        imports: [core_1.DiscoveryModule],
        providers: [services_1.ListenersExplorerService, services_1.MetadataAccessorService],
    }),
    tslib_1.__param(0, (0, common_1.Inject)(nestjs_grammy_constants_1.GRAMMY_BOT_NAME)),
    tslib_1.__metadata("design:paramtypes", [String, core_1.ModuleRef])
], GrammyCoreModule);
exports.GrammyCoreModule = GrammyCoreModule;
//# sourceMappingURL=nestjs-grammy-core.module.js.map