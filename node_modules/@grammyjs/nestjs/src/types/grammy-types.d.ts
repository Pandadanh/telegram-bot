import { Composer, FilterQuery, Middleware } from 'grammy';
export declare type Filter<T extends any[], F> = T extends [] ? [] : T extends [infer Head, ...infer Tail] ? Head extends F ? Filter<Tail, F> : [Head, ...Filter<Tail, F>] : [];
export declare type StringOrRegexQuery = string | RegExp | string[];
export declare type CommandQuery = 'start' | 'help' | 'settings' | 'admin';
export declare type BotQuery = 'on' | 'command' | 'hears' | 'gameQuery' | 'inlineQuery' | 'callbackQuery';
export declare type ComposerMethodArgs<T extends Composer<never>, U extends FilterQuery | StringOrRegexQuery | CommandQuery> = Filter<Parameters<any>, Middleware<never>>;
